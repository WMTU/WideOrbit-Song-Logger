# log.example.com
server {
    listen           80;
    listen      [::]:80;
    server_name log.example.com;
    error_log   /var/log/nginx/example.com/log/error.log;
    access_log  /var/log/nginx/example.com/log/access.log;

    return 301  https://$host$request_uri;
}

server {
    listen           443 ssl;
    listen      [::]:443 ssl;
    server_name log.example.com;
    error_log   /var/log/nginx/example.com/log/error.log;
    access_log  /var/log/nginx/example.com/log/access.log;

    root /var/www/log;

    location / {

    }

    location /api/ {
        include uwsgi_params;
        uwsgi_pass unix:/opt/log-api/log-api.sock;
    }

    # Prevent clients from accessing hidden files (starting with a dot)
    # This is particularly important if you store .htpasswd files in the site hierarchy
    # Access to `/.well-known/` is allowed.
    # https://www.mnot.net/blog/2010/04/07/well-known
    # https://tools.ietf.org/html/rfc5785
    location /.well-known {
        allow all;
    }

    # Prevent clients from accessing to backup/config/source files
    location ~* (?:\.(?:bak|conf|dist|fla|in[ci]|log|psd|sh|sql|sw[op])|~)$ {
        deny all;
    }

    # Default Certs
    # 10 year self signed ssl certificate, should only be used temporarily
    # openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout default.key -out default.pem
    ssl_certificate		/etc/nginx/ssl/default.pem;
    ssl_certificate_key	/etc/nginx/ssl/default.key;

    # 4096 bit diffie-hellman parameters
    # openssl dhparam -out dhparams.pem -5 4096
    ssl_dhparam		    /etc/nginx/ssl/dhparams.pem;

    #SSL Ciphers and Settings
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off; # Requires nginx >= 1.5.9

    # intermediate ciphers, still supports older stuff
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0

    # OCSP Stapling
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on; # Requires nginx >= 1.3.7
    ssl_stapling_verify on; # Requires nginx => 1.3.7
    resolver 1.1.1.1 8.8.8.8 valid=300s;
    resolver_timeout 5s;

    # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
    add_header Strict-Transport-Security "max-age=15768000; includeSubDomains; preload";
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
}
